#!/usr/bin/env coyote
/*
    A showcase of certain aspects unique to Coyote as an embeddable language.
    Most of these have (or will have been) already been covered in earlier examples.

    There is one notable (planned) feature that cannot be shown via a Coyote example:
        The language will include builtin editing helpers, such as syntax highlighting, code folding, autocomplete, go-to-definition, find-all-references, and more.
        Essentially an API that exposes the information that is used by (for example the Language Server Protocol. In fact, an official LSP server that exposes a LSP-compatible API will be provided.
        This will, to our knowledge, make it the *only* (relatively) lightweight embeddable scripting language with strong builtin support for this; the fact that it is a statically-typed language should enable more powerful tooling than most scripting languages do.
*/
module main;

import std.string: format;
import std.io: tty;



/********** OPERATORS **********/
/*
    Most of the C portfolio of operators is available (some, such as pointer dereferencing, are obviously missing), though Coyote adds a few of its own.
*/
unittest(operators)
{
    // concatenation
    assert([1, 2] ~ [3, 4] == [1, 2, 3, 4]);
    assert("hello" ~ ", world" == "hello, world");
    // appending
    string a = "fizz";
    a ~= "buzz";
    assert(a == "fizzbuzz");

    // comparison operators can be chained, and they work in the expected mathematical manner; for example, this checks whether `3` is between 0 and 10:
    assert(0 <= 3 <= 10);
    // above is equivalent to the following (except that each value is only evaluated up to once):
    assert(0 <= 3 && 3 <= 10);
    // chaining can combine various operators:
    assert(3 >= 0 == -0 > -3 != 30);

    // the so-called "spaceship operator" is supported:
    assert(("abc" <=> "def") < 0);
    assert((1.75 <=> 0.25) > 0);
    assert((30 <=> 30) == 0);

    // there are a number of operators supported for option types; see "OPTION TYPES" below
    // a!
    // a?.b
    // a??b
    // (a!.b exists, but is not an operator: it is simply the combination `(a!).y`)

    // `try` and `throw` are operators, to support patterns such as:
    // (commented out to avoid errors in unit test)
    //string? text = try readFile("foo.txt");
    //uint x = x > 0 ? x - 1 : throw DomainError("x must be positive");
    // TBD: `return` might also be converted to an operator, for the same reason
}



/********** OPTION TYPES **********/
/*
    Option types in Coyote are special in that they can hold an error value, instead
    of a simple `null`.
    The value of `null` still exists (at least in the current design), though it is nothing more than a specific type of an error.

    Note that nothing, even by-reference types such as classes, is nullable by default (with the sole exception of the top type). One must use `T?`, not `T`.

    The exact error handling is still TBD, so consider the examples a proposal. In particular, keywords are very likely to change, though some other changes are quite possible.
*/
// a new type of an error has to be declared (here with a parameter)
error TestError(string message);

// a utility function that results in an error *if* errmsg is non-empty
int doError(bool isError, string errmsg="")
{
    // `throw` is an expression of type `noreturn`, to facilitate the following pattern
    return !isError ? 1 : throw TestError(errmsg);
}

// an example utility function (example avoids extension methods, for simplicity)
uint? arrayIndexOf(int[] array, int item)
{
    foreach(i, arritem : array)
        if(arritem == item)
            return i;
    return null;    // `null` is technically just a special error value
}

unittest(option_types)
{
    // normal type, no error
    int x = doError(false);
    assert(x == 1);

    // option type, no error
    int? y = try doError(false);
    // `T?` is truthy if there is no error
    assert(y);
    // y! "forces" the value: it yields its value, or rethrows the error
    assert(y! == 1);

    // option type, error
    int? z = try doError(true, "some error");
    assert(!z);
    var error = cast(TestError)z.error;
    assert(error.message == "some error");

    // do something on exit from function, regardless of error (in this instance, it is useless work)
    finally doError(false);

    // found
    uint? ix = arrayIndexOf([50, 60, 70], 60);
    assert(ix && ix! == 1);

    // not found (but still okay!)
    uint? iy = arrayIndexOf([50, 60, 70], 33);
    assert(!iy && iy is null);

    // various utility operators:
    uint u1 = ix!;      // force value: ix ? ix.value : throw ix.error
    uint u2 = iy ?? 3;  // null coalescing: iy ? iy! : 3
    assert(u2 == 3);
    // or maybe `iy.?toString()`? (note the positioning of the '?')
    string? u2 = iy?.toString(); // iy ? iy!.toString() : iy.error
    assert(!u2);
    // of course, they can be combined:
    string u3 = iy?.toString() ?? "not found";
    assert(u3 == "not found");
}



/********** TRAITS **********/
/*
    Traits serve as interfaces that can be implemented for arbitrary (even builtin!)
    types. They can also be used for extension methods.
*/
trait Serializable
{
    string serialize();

    // `this_t` is the type being extended
    static this_t deserialize(string value);
}

// implement `JSONSerializable` for a builtin type
extend int: Serializable
{
    string serialize() { return format("%d", this); }

    // or `static type_t ...`
    static int deserialize(string value) { return int.parse(value); }
}

// (feature TBD) implicit traits apply to *all* types whose signature matches (structural subtyping)
implicit trait Stringifiable
{
    string toString();
}

unittest(traits)
{
    // OK: `int` has a toString (as part of language core)
    // it does not implement `Stringifiable`, but that's okay: it's an implicit trait
    Stringifiable t1 = 5;
    assert(t1.toString() == "5");

    // also OK; `Serializable` is not an implicit trait, but we extend `int` above
    Serializable t2 = 3;
    assert(t2.serialize() == "3");
}



/********** CLASSES **********/
/*
    Classes are passed by reference (same as in most languages). Whether inheritance
    is going to be supported at all is as of yet TBD.

    Note that even these are *not* nullable by default. I.e. use `Foo?` not `Foo`.
*/
class Foo: Serializable
{
    int a;
    float b;
    // constructor
    this(int a, float b) { this.a = a; this.b = b; }

    string serialize() { return format("%d,%f", a, b); }
    static this_t deserialize(string value)
    {
        // `var` infers the type of the variable (in this case `string[]`)
        var parts = value.split(",");
        return new Foo(int.parse(parts[0]), float.parse(parts[1]));
    }
}
// above is equivalent to: class Foo { ... } extend Foo: Serializable { ... }

unittest(classes)
{
    var foo1 = new Foo(1, 0.5);
    assert(foo1.serialize() == "1,0.5");

    var foo2 = Foo.deserialize("-1,-0.5");
    assert(foo2 == new Foo(-1, -0.5));
}



/********** STRUCTS **********/
/*
    Structs are passed by value. This is a rather unique feature for a scripting
    language, intended to support lightweight types such as colors.
*/
struct Color
{
    float#4 c;
    this(float#4 rgba) { this.c = rgba; }
    this(float#3 rgb) { this(float#(rgb, 1.0)); }
    this(float r, float g, float b, float a = 1.0) { this(float#(r, g, b, a)); }

    // alternative to below
    //string toString() { ... }
}

// with nothing after the `:`, this extends Color with anonymous trait, thus creating simple extension methods
extend Color
{
    // because `Stringifiable` above is an implicit trait, this will also make said trait apply to `Color`
    string toString()
    {
        return c.toString();
    }
}

unittest(structs)
{
    // structs are created without `new` (to emphasize the fact that they are stack-allocated)
    var c = Color(0.0, 0.5, 0.75);
    assert(c.toString() == "(0.0,0.5,0.75,1.0)");
}



/********** ENUMS **********/
// enums implement both normal "C-like" enums (albeit with their own type)
// *and* tagged unions (latter feature inspired by Haxe)

// simple symbolic enum
enum Seek
{
    Set,
    Cur,
    End,
}

// enums can be based off of arbitrary (TBD: might have some limitations) types
enum Device: string
{
    // values are optional for integer types
    Null = "/dev/null",
    Zero = "/dev/zero",
    Random = "/dev/random",
}

// (feature TBD) implicit enum can be used without prefixing, similar to C enums
implicit enum GLenum: uint
{
    GL_BYTE           = 0x1400,
    GL_UNSIGNED_BYTE  = 0x1401,
    GL_SHORT          = 0x1402,
    GL_UNSIGNED_SHORT = 0x1403,
    GL_FLOAT          = 0x1406,
    GL_FIXED          = 0x140C,
}

// (feature & keywords TBD) auto enums are simple enums that can be extended; the intent is to provide for enums where the full set of used values is not known at place of writing
// declare enum
auto enum InputDevice;
// add devices
auto enum InputDevice { Keyboard, Joystick, Gamepad }

enum JSONValue
{
    // enums members can hold values, making them serve as tagged unions
    Object(JSONValue[string]),
    Array(JSONValue[]),
    String(string),
    Number(double),
    Boolean(bool),
    Null,
}

unittest(enums)
{
    var seek = Seek.Set;
    // `final` ensures that *all* the possible values are handled
    final switch(seek)
    {
    // Seek.* may be omitted in switches on something of (static) type `Seek`:
    case Set: break;
    case Seek.Cur: assert(false);
    default: assert(false);
    }

    // OK: `Device` can be implicitly converted to `string` (but not vice-versa!)
    string devPath = Device.Null;
    //Device dev = "/dev/zero";   // error: `string` cannot be implicitly converted to `Device`
    // OK (would have thrown error on failure)
    Device dev1 = Device("/dev/zero");
    // always OK (but could return an error)
    Device? dev2 = try Device("/dev/nonexisting");

    // OK: `GLenum` is an implicit enum
    GLenum gltype1 = GL_UNSIGNED_SHORT;
    // a more explicit version of the above
    GLenum gltype2 = GLenum.GL_UNSIGNED_SHORT;

    var json = JSONValue.String("hello, world");
    switch(json)
    {
    case String(s): tty.stdout.println("found string:", s); break;
    case Number(n): tty.stdout.println("found number:", n); break;
    case Boolean(b): tty.stdout.println("found boolean:", b); break;
    case Null: tty.stdout.println("found null"); break;
    // this is not a `final` switch, so other cases are simply ignored
    }
}



/********** ARRAYS **********/
/*
    All arrays in Coyote are dynamic. Multidimensional arrays exist, and uniquely, Coyote will support reshaping to and from single-dimensional arrays.

    Vector operations are also supported on arrays.
*/
unittest(arrays_simple)
{
    // normal array
    int[] a = [1, 2, 3, 4, 5];
    // resizing
    a.length = 2;
    assert(a == [1, 2]);

    // appending
    a ~= 3;
    assert(a == [1, 2, 3]);

    // concatenation
    assert(a ~ [40, 50] == [1, 2, 3, 40, 50]);

    // arrays are merely views of data; this means that slicing does *not* copy:
    int[] aSlice = a[0..2];
    assert(aSlice == [1, 2]);
    aSlice[0] = 99;
    assert(a == [99, 2, 3]);
    // an explicit (shallow) copy may be created with the `.dup` property:
    int[] aCopy = a.dup;
    a[0] = 1;
    aCopy[0] = 50;
    assert(a == [1, 2, 3]);
    assert(aCopy == [50, 2, 3]);

    // `$` is a shorthand for the length in the current dimension
    assert(a == a[] == a[0..$]);
    // `$n` is a shorthand for the length of the nth dimension
    assert(a[$-1] == a[$0-1] == a[a.dim[0]-1]);

    // vector operations are supported (requested explicitly via slicing syntax)
    int[] b = a[] * a[];
    assert(b == [1, 4, 9]);
    // broadcasting
    b = a[] + 2;
    assert(b == [3, 4, 5]);

    // (feature TBD) immutable array
    int[!] c = [1, 2, 3];
    //c[0] = 4;   // compile-time error
    // if immutable arrays are provided, they will most likely be used for strings (`string` will become an alias for `char[!]`)
}
unittest(arrays_multidimensonal)
{
    // multidimensional arrays are supported, and can be reshaped from and to 1D arrays:
    int[,] a = [1, 2, 3; 4, 5, 6];    // note: literal syntax TBD
    // `length` is the total length of an array in memory; it is read-only, except for 1D arrays
    assert(a.length == 6);
    // `dim` is the per-dimension length of an array; it is read-write
    assert(a.dim == [2, 3]);

    // `a.flat` is a conveniency wrapper for `bitcast(int[])a`
    int[] b = a.flat;
    // since arrays are views, this also modifies `a`:
    b[2] = 33;
    assert(a == [1, 2, 33; 4, 5, 6]);

    // syntax for converting a 1D array to N-D is planned, but TBD
    //int[,] aAgain = bitcast(int[2,3])b;   // (this probably won't quite work, but demonstrates the idea)
    //assert(a == aAgain);
}



/********** TENSORS **********/
/*
    Unlike most other languages, Coyote will support actual, mathematical tensors.
    The exact details are as of yet TBD (for example, there is a possibility that only vectors & matrices will be supported, and not general tensors).

    The rationale for vectors (1-dimension tensors) is that many libraries tend to invent their own, since languages do not support them; this is a common enough requirement that it makes sense to simply have them builtin.

    Support for matrices (2-dimension tensors) is motivated by a desire to support game development easily. General tensor supprot is merely a generalization of this idea to an arbitrary number of dimensions.
*/
unittest(tensors)
{
    // create a vector (1D tensor)
    int#2 v = int#2(10, 20);    // int#2 is syntactic sugar for int#[2]
    v.x += 3;
    assert(v == int#(13, 20));  // int#(...) syntactic sugar for int#[N](...) with appropriate N

    // arithmetic is implicit (i.e. without `v[]`) for vectors
    assert(v * 2 == int#(26, 40));
    // vector constructors support other vectors; the length of the result is the sum of lengths of arguments
    assert(int#(1, v, 4) == int#(1, 13, 20, 4));

    // due to common use of name-based access, and inspired by GLSL, vectors up to size of 4 have support for such, as well as for "swizzling":
    // (n.b.: this may be implemented via a set of extension methods)
    assert(v.x == v[0]);
    assert(v.xxw == int#(v[0], v[0], v[3]));
    assert(v.xyzw == v.rgba == v.stpq);
    // swizzling can also be used in assignments:
    assert(v == int#(1, 13, 20, 4));
    v.yx = v.xy;
    assert(v == int#(13, 1, 20, 4));
    v.xyzw = v.yyyy;
    assert(v == int#(1, 1, 1, 1));

    // create 3x2 a matrix (2D tensor); syntax TBD
    int#[3,2] m = int#(int#(1, 2, 3), int#(4, 5, 6));
}



/********** GENERICS **********/
/*
    No example yet: Details are as of yet TBD, though some sort of support for generics will have to be provided due to the statically-typed nature of the language.

    Therefore, what follows is merely a proposal.

    The syntax is most likely going to be e.g. `Array$int` (which is shorthand for `Array$(int)`).
    The popular syntax of `Array<int>` has been avoided due to ambiguity problems with the `>>` and `>>>` operators.
*/
// type example:
class LinkedList$T
{
    class Node
    {
        Node? prev, next;
        T value;
    }
    Node? head, tail;
    //...
}
// function example:
void swap$T(ref T a, ref T b)
{
    T tmp = a;
    a = b;
    b = tmp;
}

unittest(generics)
{
    var a = new LinkedList$int;
    a ~= 3;
    a ~= 4;
    a ~= 5;

    var b = 3;
    var c = 4;
    swap(ref b, ref c);
    assert(b == 4 && c == 3);
}
